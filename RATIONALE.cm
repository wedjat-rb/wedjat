= RATIONALE

== Wedjat::Test

=== Motto

Document project requirements.
Define your initial API (Architecture docs).
Specify clearly your requirements for each exposed action (specification docs).
Setup the bare minimum tests (red light on).
Implement your code (green light up).
Deploy.
Work internals (improve).
Add functionality (extend).
Be SOLID.
Lecture the world (more docs, videos, articles, screencasts, presentations).

Think first about the API.
What shall you exposing?
Aim for one major release for all time.
Be consistent.
Deliver functionality fast.
Work the internals later.
Add functionality without disrupting previous work.
Be SOLID.
Document your classes and methods.
Developers/contributions documentation.
Users documentation.

=== Organization of folders and files.

* One test file per each public method
* instance method files will be named like `/"#{method_name}_test.rb"/
* class method files need to be prefixed by a character which would satisfy the following conditions:
** Can not be used as the first letter of a method name.
** Would play well with command line operations on file names.
** Should be able to be configurable
** Should be inline with some community convention
** Should play well with special methods names

** Rationale
*** `'::'  It is used as convention for class methods. 
**** Does not play well with command line operations.

*** `'.' It is used as a convention for class methods. 
**** It is used for hidden files.

*** Special methods
**** `'+   -   * ** /   =   ==  ===  !=    >   <   >=    <=    [] ~ !~ =~ ! ^ >> << ` | & %'
**** These methods are allowed to be used in the definition of a class of instance method
**** The characters used by this methods can not be used in any other type of combination

*** Characters used as method name first character:
**** `'_' and lower case letters [a-z]

*** Numbers
**** Ex: 0_[]_test.rb
         0_foo_test.rb
**** What is the meaning of \`'0'?

*** Capital letters
**** Ex: Foo_test.rb
**** Problem: Special methods?

** Decision

From all of this Rationale I will favour:

>> `'::foo_test.rb'

NOTE: 
> In command-line we need to escape the colons.
> But we should allow it to be configurable.

NOTE:
> ~~Special methods~~
> We have a problem here because not all special methods will be able to have a file name.
> The operating system doesn't allow it.

> What shall we do in those situations?

> Ok. Not a problem. In order to create those files we can quote the filename:
> Ex: `/~$ touch '::<_test.rb'/


=== Auxiliary files

* Each class or module will have a folder in the `'test/unit' suite.
* In each folder we should have one or more auxiliary files.
* Each auxiliary ruby file will be a ruby file required by one or more test files within the folder or subfolders.
* This auxiliary files can also be put in a special directory.
* The special directory will store files with common functionality.
* The special directory should be on the `'$LOAD_PATH'
* Current directory is always on the `'$LOAD_PATH'
* We have then two directories to had to the `'$LOAD_PATH'
** current directory
** special directory
> This way making auxiliary file available to sub folders is out of option for the time being.
> Common code to be used across folders should go to the special directory.
> 
> We should keep things simple!

==== How shall we name this things? What conventions?

===== Special/Auxiliary file

* The auxiliary file will have a class
* The class will be under the lib file namespace

  Ex: 
  Lib file: `'lib/foo/bar/baz.rb'
  Lib file module/class namespace: `'::Foo::Bar::Baz'
  Auxiliary file: `'test/foo/bar/baz/auxiliary.rb'
  Auxiliary file class namespace: `'::Foo::Bar::Baz::Auxiliary'

* This means that Auxiliary will be a reserved namespace
* As a pattern all test files should be identified by the `'*_test.rb' suffix.
* This means that Auxiliary file can not be `'auxiliary_test.rb'
* Auxiliary would make sense to be wedjat.
* `'Wedjat' however will be a lot of things.

  `'Wedjat::Test' as in `'wedjat_test.rb' would be the proper thing to use.
  It has some problems:

** Name is to big. 
** Collides with the test files suffix ==> `'foo_test.rb'

* What is the problem if we use `'wedjat.rb'?
* Can we make it more generic and allow anything?
* Maybe a different suffix: `'foo_wedjat.rb'
* Or anything `'wedjat' like: `'*_wedjat.rb'
  being `'wedjat.rb' the default auxiliary file?
* This way `'Wedjat' will be a reserved namespace?
  No!
  If anyone wants to use it they will be able to use a `'*_wedjat.rb' file/class.
* In `'RSPEC' they use `'subject' as the main object throughout the test suite.
  
  `'subject' it is the instance of the class under test.
  Not what we are looking for here.

  Here it is something more like the `'shared context' stuff.

* `'auxiliary' can be a module that we then include dynamically into a class definition under the "scope" namespace.

* Better allow anything ruby.

* As a Best Practice we will put the method name under test the class name.

  Ex: 

  method under test ==> `'::Foo::Bar#baz'
  test folder ==> `'test/foo/bar'
  test file ==> `'baz_test.rb'
  auxiliary file ==> `'baz.rb'
  auxiliary class ==> `'::Foo::Bar::Baz'

* One auxiliary file per test file

* Special methods will have files with their alias names on it.

* The class name will define the method available at the test file.

* That way each user can use any kind of name that suits them better.

* But how to identify the files?



===== Special/Auxiliary directory

=== Architecture

The `'main object space' is a ::Wedjat::Test domain!
Anything under test should not polute `'main object space'.

Each test is handled by one object.
Test suite is run by `'Wedjat::Test' after loading everything into memory?
What is the best way?
Optimizations?
But we need to be able to give a report about the all test suite.
We also need to allow parallel run of the tests.
Gather all the information and display it.

* `'::Wedjat::Test' ==> Main test interface. (gem ==> `'wedjat-test')
* `'::Wedjat::Test::DSL' ==> Exposes methods to be used in test files. Delegates to other classes. (gem ==> `'wedjat-test')
* `'::Wedjat::Test::Adapter' ==> Base class for auxiliary test classes(Adapters). (gem ==> `'wedjat-test')(re-evaluate name!)
* `'::Wedjat::Test::Configuration' ==> Configure execution options. (gem ==> `'wedjat-test')
* `'::Wedjat::Test::Kernel' ==> Receives and handles instructions accordingly (gem ==> `'wedjat-test')(internal)
* `'::Wedjat::Test::Unit' ==> One instance per test example (gem ==> `'wedjat-test')(internal)
* `'::Wedjat::Test::Queue' ==> Queue of test units to be run (gem ==> `'wedjat-test')(internal)
* `'::Wedjat::Test::Poll' ==> Gathers test information and pushes `'::Wedjat::Test::Unit' instances to the tests queue (gem ==> `'wedjat-test')(internal)
* `'::Wedjat::Test::Builder' ==> Builds test units dynamically (gem ==> `'wedjat-test')(internal)
* `'::Wedjat::Test::Reader' ==> Reads the tests files. Understands the instructions? (gem ==> `'wedjat-test')(internal)(re-evaluate)
* `'::Wedjat::Test::Interpreter' ==> Interprets the messages received by the reader. (gem => `'wedjat-test')(internal)(re-evaluate)
* `'::Wedjat::Test::Suite' ==> Gather all unit tests into one suite (gem ==> `'wedjat-test')(internal)(interface from `'::Wedjat::Test' module) 
* `'::Wedjat::Test::Monitor' ==> Monitor current execution status (gem ==> `'wedjat-test')(internal)(interface from `'::Wedjat::Test' module)(plugin extendable)
* `'::Wedjat::Test::Runner' ==> Run each one of the unit tests (gem ==> `'wedjat-test')(internal)
* `'::Wedjat::Test::Parallel' ==> Run tests in parallel (gem ==> `'wedjat-test')(internal)(interface from `'::Wedjat::Test' module)
* `'::Wedjat::Test::Report' ==> Report tests runned (gem ==> `'wedjat-test')(internal)(interface from `'::Wedjat::Test' module)(plugin extendable)

* `'::Wedjat::Assertions' ==> Assertions module (gem ==> `'wedjat-assertions') 
* `'::Wedjat::Expectations' ==> Expectations module (gem ==> `'wedjat-assertions')
* `'::Wedjat::Mock' ==> Mock functionality add-on to objects (gem ==> `'wedjat-mock') 

=== Running tests

==== Two ways of running tests

===== wedjat --test command

* wedjat will flag ::Wedjat::Test.suite
* The ::Wedjat::Test.suite run will be under full control
* Anything will be possible

===== ruby over single file or list of files

* Control of ::Wedjat::Test.suite run will be limited
* Test file will tell what to be run
* The run instruction is not on the test file side
* The run instruction should be on ::Wedjat::Test.suite side
* test registration should be made by the initialize mechanism
* The assert/test/expect/should/ok command should trigger the run
* By default it run each test as soon the assert command is defined
* The run will start to generate the report and print the results

=== API

The definition of the API is something important.

==== What would be the perfect API?

* No nested blocks to describe tests!
* No describe and context blocks.
* No nested describe and context blocks.
* Just single and independent tests.
* It should allow generation of documentation
* It should allow generation of specification
* It should allow understanding of functionality
* It should be plain old ruby
* A single test file should be able to be run by ruby command
* Wedjat::Test should provide command to run one or more test files.
* It should rely on ruby conventions
* It should be as simple as possible
* Ruby is almost all you need to know
* Wedjat::Test documentation should be bare minimum
* Give freedom to the developer with solid and self contained rules
* Promote best practices
* Clear and stable API
* Self contained API like always
* Allow plugin system for costumization
* Marketing headline:
** Minimum code lines
** Maximum performance
** Simple design
** Extensible
** DDD
** Pure ruby




