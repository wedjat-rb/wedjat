= RATIONALE

== Wedjat::Test

=== Organization of folders and files.

* One test file per each public method
* instance method files will be named like `/"#{method_name}_test.rb"/
* class method files need to be prefixed by a character which would satisfy the following conditions:
** Can not be used as the first letter of a method name.
** Would play well with command line operations on file names.
** Should be able to be configurable
** Should be inline with some community convention
** Should play well with special methods names

** Rationale
*** `'::'  It is used as convention for class methods. 
**** Does not play well with command line operations.

*** `'.' It is used as a convention for class methods. 
**** It is used for hidden files.

*** Special methods
**** `'+   -   * ** /   =   ==  ===  !=    >   <   >=    <=    [] ~ !~ =~ ! ^ >> << ` | & %'
**** These methods are allowed to be used in the definition of a class of instance method
**** The characters used by this methods can not be used in any other type of combination

*** Characters used as method name first character:
**** `'_' and lower case letters [a-z]

*** Numbers
**** Ex: 0_[]_test.rb
         0_foo_test.rb
**** What is the meaning of \`'0'?

*** Capital letters
**** Ex: Foo_test.rb
**** Problem: Special methods?

** Decision

From all of this Rationale I will favour:

>> `'::foo_test.rb'

NOTE: 
> In command-line we need to escape the colons.
> But we should allow it to be configurable.

NOTE:
> ~~Special methods~~
> We have a problem here because not all special methods will be able to have a file name.
> The operating system doesn't allow it.

> What shall we do in those situations?

> Ok. Not a problem. In order to create those files we can quote the filename:
> Ex: `/~$ touch '::<_test.rb'/


=== Auxiliary files

* Each class or module will have a folder in the `'test/unit' suite.
* In each folder we should have one or more auxiliary files.
* Each auxiliary ruby file will be a ruby file required by one or more test files within the folder or subfolders.
* This auxiliary files can also be put in a special directory.
* The special directory will store files with common functionality.
* The special directory should be on the `'$LOAD_PATH'
* Current directory is always on the `'$LOAD_PATH'
* We have then two directories to had to the `'$LOAD_PATH'
** current directory
** special directory
> This way making auxiliary file available to sub folders is out of option for the time being.
> Common code to be used across folders should go to the special directory.
> 
> We should keep things simple!

==== How shall we name this things? What conventions?

===== Special/Auxiliary file

* The auxiliary file will have a class
* The class will be under the lib file namespace

  Ex: 
  Lib file: `'lib/foo/bar/baz.rb'
  Lib file module/class namespace: `'::Foo::Bar::Baz'
  Auxiliary file: `'test/foo/bar/baz/auxiliary.rb'
  Auxiliary file class namespace: `'::Foo::Bar::Baz::Auxiliary'

* This means that Auxiliary will be a reserved namespace
* As a pattern all test files should be identified by the `'*_test.rb' suffix.
* This means that Auxiliary file can not be `'auxiliary_test.rb'
* Auxiliary would make sense to be wedjat.
* `'Wedjat' however will be a lot of things.

  `'Wedjat::Test' as in `'wedjat_test.rb' would be the proper thing to use.
  It has some problems:

** Name is to big. 
** Collides with the test files suffix ==> `'foo_test.rb'

* What is the problem if we use `'wedjat.rb'?
* Can we make it more generic and allow anything?
* Maybe a different suffix: `'foo_wedjat.rb'
* Or anything `'wedjat' like: `'*_wedjat.rb'
  being `'wedjat.rb' the default auxiliary file?
* This way `'Wedjat' will be a reserved namespace?
  No!
  If anyone wants to use it they will be able to use a `'*_wedjat.rb' file/class.




===== Special/Auxiliary directory






